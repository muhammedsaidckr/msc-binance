<?php

namespace Mscakir\MscBinance\Objects;

use Mscakir\MscBinance\Enums\HttpStatusCode;
use DateInterval;
use Illuminate\Support\Collection;
use Mscakir\MscBinance\Enums\HttpMethod;

/**
 * The result of request
 */
class WebCallResult extends CallResult
{
    /**
     * The request http method
     *
     * @var HttpMethod|null $requestMethod
     */
    public HttpMethod|null $requestMethod;

    /**
     * The headers sent with the request
     *
     * @var Collection<array> $requestHeaders
     */
    public Collection $requestHeaders;

    /**
     * The url which was requested
     *
     * @var string|null $requestUrl
     */
    public string|null $requestUrl;

    /**
     * The body of the request
     *
     * @var string|null $requestBody
     */
    public string|null $requestBody;

    /**
     * The status code of the response. Note that a OK status does not always indicate success, check the Success parameter for this
     *
     * @var HttpStatusCode|null $responseStatusCode
     */
    public HttpStatusCode|null $responseStatusCode;

    /**
     * The response headers
     *
     * @var Collection $responseHeaders
     */
    public Collection $responseHeaders;

    /**
     * The time between sending the request and receiving the response
     *
     * @var DateInterval $responseTime
     */
    public DateInterval $responseTime;

    public function __construct()
    {
        parent::__construct();
    }

    /**
     * @param HttpStatusCode|null $code
     * @param Collection $responseHeaders
     * @param DateInterval|null $responseTime
     * @param string|null $requestUrl
     * @param string|null $requestBody
     * @param HttpMethod|null $requestMethod
     * @param Collection|null $requestHeaders
     * @param Error|null $error
     * @return WebCallResult
     */
    public function withSuccess(
        HttpStatusCode|null $code,
        Collection               $responseHeaders,
        DateInterval|null        $responseTime,
        string|null              $requestUrl,
        string|null              $requestBody,
        HttpMethod|null          $requestMethod,
        Collection|null          $requestHeaders,
        Error|null               $error
    ): WebCallResult
    {
        $instance = new self();
        parent::withError($error);
        $instance->responseStatusCode = $code;
        $instance->responseHeaders = $responseHeaders;
        $instance->responseTime = $responseTime;
        $instance->requestUrl = $requestUrl;
        $instance->requestBody = $requestBody;
        $instance->requestHeaders = $requestHeaders;
        $instance->requestMethod = $requestMethod;
        return $instance;
    }

    /**
     * @param Error|null $error
     * @return CallResult
     */
    public function withError(?Error $error): CallResult
    {
        return parent::withError($error); // TODO: Change the autogenerated stub
    }

    /**
     * Return the result as an error result
     *
     * @param Error $error
     * @return WebCallResult
     */
    public function asError(Error $error):WebCallResult
    {
        $instance = new self();
        return $instance->withSuccess(
            $this->responseStatusCode,
            $this->responseHeaders,
            $this->responseTime,
            $this->requestUrl,
            $this->requestBody,
            $this->requestMethod,
            $this->requestHeaders,
            $error
        );
    }
}
